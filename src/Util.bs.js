// Generated by BUCKLESCRIPT VERSION 2.2.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function explodeString(s) {
  var s$1 = s;
  var _idx = s.length - 1 | 0;
  var _acc = /* [] */0;
  while(true) {
    var acc = _acc;
    var idx = _idx;
    if (idx === -1) {
      return acc;
    } else {
      var c = Caml_string.get(s$1, idx);
      _acc = /* :: */[
        c,
        acc
      ];
      _idx = idx - 1 | 0;
      continue ;
      
    }
  };
}

function unfold(f, seed) {
  var _current = seed;
  var _acc = /* [] */0;
  while(true) {
    var acc = _acc;
    var current = _current;
    var match = Curry._1(f, current);
    if (match) {
      var match$1 = match[0];
      _acc = /* :: */[
        match$1[0],
        acc
      ];
      _current = match$1[1];
      continue ;
      
    } else {
      return List.rev(acc);
    }
  };
}

function flattenOption(optOpt) {
  if (optOpt) {
    var match = optOpt[0];
    if (match) {
      return /* Some */[match[0]];
    } else {
      return /* None */0;
    }
  } else {
    return /* None */0;
  }
}

function getOrThrow(exnFn, opt) {
  if (opt) {
    return opt[0];
  } else {
    throw Curry._1(exnFn, /* () */0);
  }
}

function getOrThrowDefault(opt) {
  return getOrThrow((function () {
                return [
                        Caml_builtin_exceptions.failure,
                        "Expected Some()"
                      ];
              }), opt);
}

var alphaRegex = (/[a-zA-Z]+/);

function isAlpha(s) {
  return +alphaRegex.test(s);
}

function direction_of_orientation(o) {
  if (o !== 0) {
    return /* tuple */[
            0,
            1
          ];
  } else {
    return /* tuple */[
            1,
            0
          ];
  }
}

exports.explodeString = explodeString;
exports.unfold = unfold;
exports.flattenOption = flattenOption;
exports.getOrThrow = getOrThrow;
exports.getOrThrowDefault = getOrThrowDefault;
exports.isAlpha = isAlpha;
exports.direction_of_orientation = direction_of_orientation;
/* alphaRegex Not a pure module */
