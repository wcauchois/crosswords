// Generated by BUCKLESCRIPT VERSION 2.2.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function ofList(l) {
  var current = [l];
  return (function () {
      var match = current[0];
      if (match) {
        current[0] = match[1];
        return /* Some */[match[0]];
      } else {
        return /* None */0;
      }
    });
}

function collect(g) {
  var aux = function (_acc) {
    while(true) {
      var acc = _acc;
      var match = Curry._1(g, /* () */0);
      if (match) {
        _acc = /* :: */[
          match[0],
          acc
        ];
        continue ;
        
      } else {
        return acc;
      }
    };
  };
  return List.rev(aux(/* [] */0));
}

function range(start, end_, step) {
  var i = [start];
  var stepOrDefault = step ? step[0] : 1;
  if (!stepOrDefault) {
    throw [
          Caml_builtin_exceptions.failure,
          "Step must be nonzero"
        ];
  }
  var cond = stepOrDefault > 0 ? (function () {
        return +(i[0] < end_);
      }) : (function () {
        return +(i[0] > end_);
      });
  return (function () {
      if (Curry._1(cond, /* () */0)) {
        return /* Some */[i[0]];
      } else {
        return /* None */0;
      }
    });
}

exports.ofList = ofList;
exports.collect = collect;
exports.range = range;
/* No side effect */
